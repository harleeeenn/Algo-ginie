#ifndef LEXER_H
#define LEXER_H

typedef enum {
    TOKEN_INT,TOKEN_AUTO, TOKEN_BREAK, TOKEN_CASE, TOKEN_CHAR, TOKEN_CONST, TOKEN_CONTINUE,
    TOKEN_DEFAULT, TOKEN_DO, TOKEN_DOUBLE, TOKEN_ELSE, TOKEN_ENUM, TOKEN_EXTERN,
    TOKEN_FLOAT, TOKEN_FOR, TOKEN_GOTO, TOKEN_IF,TOKEN_LONG,
    TOKEN_REGISTER, TOKEN_RETURN, TOKEN_SHORT, TOKEN_SIGNED, TOKEN_SIZEOF,
    TOKEN_STATIC, TOKEN_STRUCT, TOKEN_SWITCH, TOKEN_TYPEDEF, TOKEN_UNION,
    TOKEN_UNSIGNED, TOKEN_VOID, TOKEN_VOLATILE, TOKEN_WHILE, 
    TOKEN_IDENTIFIER, TOKEN_ASSIGN, TOKEN_NUMBER, TOKEN_SEMICOLON,
    TOKEN_COMMA, TOKEN_OPERATOR, TOKEN_OPEN_BRACE, TOKEN_CLOSE_BRACE,
    TOKEN_ROUND_BRACE_OPEN, TOKEN_ROUND_BRACE_CLOSE, TOKEN_PRINT,
    TOKEN_STRING_LITERAL,TOKEN_FUNCTION_MAX,
    TOKEN_EOF
} TokenType;

typedef struct {
    TokenType type;
    char lexeme[100];
} Token;

Token* tokenize(const char* filename, int* tokenCount);

#endif  
